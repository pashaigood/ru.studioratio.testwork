{"version":3,"sources":["scripts/app-e3ae4fe3fc.js"],"names":["angular","module","directive","$compile","scope","millis","controller","$scope","$element","calculateTimeUnits","maxTimeUnit","seconds","Math","floor","minutes","hours","days","months","years","secondsS","minutesS","hoursS","daysS","monthsS","yearsS","sseconds","mminutes","hhours","ddays","mmonths","yyears","append","contents","$watch","service","$localStorage","taskFactory","$default","tasks","cnt","length","TasksController","$interval","tasksService","addingMinutes","init","onTimerTick","timestamp","Date","now","check","remove","task","index","indexOf","splice","addMinutes","amount","restrict","templateUrl","bindToController","$inject","factory","oneMinute","addingMinutesBeforeRemove","Task","data","date","self","this","extend","coeff","round","prototype","title","desc","status","getTime","newTask","NewTaskController","$log","form","add","$valid","push","$setPristine","debug","controllerAs","MainController","runBlock","run","constant","config","$logProvider","debugEnabled","$templateCache","put"],"mappings":"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","file":"scripts/app-e3ae4fe3fc.js","sourcesContent":["(function () {\n    'use strict';\n\n    angular\n        .module('testwork', [\n            'ui.bootstrap',\n            'ngStorage'\n        ]);\n\n})();\n\n(function () {\n    'use strict';\n    angular.module('testwork')\n        .directive('timeFormat', function ($compile) {\n\n            return {\n                scope: {\n                    millis: '=timeFormat'\n                },\n                controller: function ($scope, $element) {\n                    $element.append($compile($element.contents())($scope));\n\n                    $scope.$watch('millis', function () {\n                        calculateTimeUnits($scope);\n                    });\n\n                    function calculateTimeUnits() {\n\n                        // compute time values based on maxTimeUnit specification\n                        if (!$scope.maxTimeUnit || $scope.maxTimeUnit === 'day') {\n                            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n                            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n                            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n                            $scope.days = Math.floor((($scope.millis / (3600000)) / 24));\n                            $scope.months = 0;\n                            $scope.years = 0;\n                        } else if ($scope.maxTimeUnit === 'second') {\n                            $scope.seconds = Math.floor($scope.millis / 1000);\n                            $scope.minutes = 0;\n                            $scope.hours = 0;\n                            $scope.days = 0;\n                            $scope.months = 0;\n                            $scope.years = 0;\n                        } else if ($scope.maxTimeUnit === 'minute') {\n                            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n                            $scope.minutes = Math.floor($scope.millis / 60000);\n                            $scope.hours = 0;\n                            $scope.days = 0;\n                            $scope.months = 0;\n                            $scope.years = 0;\n                        } else if ($scope.maxTimeUnit === 'hour') {\n                            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n                            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n                            $scope.hours = Math.floor($scope.millis / 3600000);\n                            $scope.days = 0;\n                            $scope.months = 0;\n                            $scope.years = 0;\n                        } else if ($scope.maxTimeUnit === 'month') {\n                            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n                            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n                            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n                            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n                            $scope.months = Math.floor((($scope.millis / (3600000)) / 24) / 30);\n                            $scope.years = 0;\n                        } else if ($scope.maxTimeUnit === 'year') {\n                            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n                            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n                            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n                            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n                            $scope.months = Math.floor((($scope.millis / (3600000)) / 24 / 30) % 12);\n                            $scope.years = Math.floor(($scope.millis / (3600000)) / 24 / 365);\n                        }\n                        // plural - singular unit decision\n                        $scope.secondsS = $scope.seconds == 1 ? '' : 's';\n                        $scope.minutesS = $scope.minutes == 1 ? '' : 's';\n                        $scope.hoursS = $scope.hours == 1 ? '' : 's';\n                        $scope.daysS = $scope.days == 1 ? '' : 's';\n                        $scope.monthsS = $scope.months == 1 ? '' : 's';\n                        $scope.yearsS = $scope.years == 1 ? '' : 's';\n                        //add leading zero if number is smaller than 10\n                        $scope.sseconds = $scope.seconds < 10 ? '0' + $scope.seconds : $scope.seconds;\n                        $scope.mminutes = $scope.minutes < 10 ? '0' + $scope.minutes : $scope.minutes;\n                        $scope.hhours = $scope.hours < 10 ? '0' + $scope.hours : $scope.hours;\n                        $scope.ddays = $scope.days < 10 ? '0' + $scope.days : $scope.days;\n                        $scope.mmonths = $scope.months < 10 ? '0' + $scope.months : $scope.months;\n                        $scope.yyears = $scope.years < 10 ? '0' + $scope.years : $scope.years;\n\n                    }\n                }\n            }\n        });\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('testwork')\n        .service('tasksService', function($localStorage, taskFactory) {\n            $localStorage.$default({\n                tasks: []\n            });\n\n            var cnt = $localStorage.tasks.length;\n\n            while (--cnt > -1) {\n                $localStorage.tasks[cnt] = taskFactory($localStorage.tasks[cnt]);\n            }\n\n            return $localStorage.tasks;\n        });\n})();\n(function() {\n    'use strict';\n\n    angular\n        .module('testwork')\n        .directive('tasks', tasks);\n\n    /** @ngInject */\n    function tasks() {\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/tasks/tasks.html',\n            controller: TasksController,\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function TasksController($scope, $interval, tasksService, addingMinutes) {\n\n\n            $scope.tasks = tasksService;\n            $scope.timestamp = Date.now();\n\n\n            function init() {\n                // Выполним первую проверку\n                // и заведём таймер.\n                onTimerTick();\n                $interval(onTimerTick, 1000);\n            }\n\n\n            /**\n             * Удаляет задачу\n             */\n            $scope.remove = function(task) {\n                var index = $scope.tasks.indexOf(task);\n                if (index > -1) {\n                    $scope.tasks.splice(index, 1);\n                }\n            };\n\n            /**\n             * Продлевает задачу\n             */\n            $scope.addMinutes = function(task, amount) {\n                amount = amount || addingMinutes;\n                task.addMinutes(amount);\n            };\n\n            function onTimerTick() {\n                $scope.timestamp = Date.now();\n                // Проверим все задачи.\n                // Если какая из них истекала, то удалим её.\n                var cnt = $scope.tasks.length;\n\n                while (--cnt > -1) {\n                    if (! $scope.tasks[cnt].check($scope.timestamp)) {\n                        $scope.remove($scope.tasks[cnt]);\n                    }\n                }\n            }\n\n            init();\n        }\n    }\n\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('testwork')\n        .factory('taskFactory', function (addingMinutes, oneMinute, addingMinutesBeforeRemove) {\n\n\n            function Task(data) {\n                data.date = new Date(data.date);\n\n                var self = this;\n                angular.extend(self, data);\n\n                // В более маштабном приложении, конечно стоит\n                // использовать momentjs\n\n                // Округлим до секунд, а то некрасиво.\n                var coeff =  oneMinute / 60;\n                self.date = new Date(Math.round(self.date / coeff) * coeff);\n            }\n\n            angular.extend(Task.prototype, {\n                title: '',\n                desc: '',\n                status: 0,\n\n                /**\n                 * Метод обрабатывает изменние времени.\n                 */\n                check: function (timestamp) {\n                    var self = this;\n                    timestamp = timestamp || Date.now();\n\n                    if (timestamp > self.date.getTime()) {\n                        switch (self.status) {\n                            case 0: // Помечаем на удаление и добавляем 2 минуты.\n                                self.addMinutes(addingMinutesBeforeRemove, timestamp);\n                                self.status = 1;\n                                return true;\n                            case 1: // Нас уже ничего не спасёт, сообщаем, что нас можно удалять.\n                                return false;\n                        }\n                    }\n\n                    return true;\n                },\n\n                addMinutes: function(amount, timestamp) {\n                    var self = this;\n                    timestamp = timestamp || self.date.getTime();\n                    self.date = new Date(timestamp + amount * oneMinute);\n                    self.status = 0;\n                }\n            });\n\n            return function (data) {\n                // Поумолчанию время равно сейчас + 10 минут (addingMinutes)\n                data = data || {\n                    date: Date.now() + addingMinutes * oneMinute\n                };\n                return new Task(data);\n            }\n        });\n\n})();\n\n(function() {\n    'use strict';\n\n    angular\n        .module('testwork')\n        .directive('newTask', newTask);\n\n    /** @ngInject */\n    function newTask() {\n        var directive = {\n            restrict: 'E',\n            templateUrl: 'app/components/newTask/newTask.html',\n            controller: NewTaskController,\n            controllerAs: 'form',\n            bindToController: true\n        };\n\n        return directive;\n\n        /** @ngInject */\n        function NewTaskController($scope, $log, taskFactory, tasksService) {\n            var form = this;\n            $scope.task = taskFactory();\n\n            form.add = function() {\n                if (! $scope.newTask) {\n                    return false;\n                }\n\n                //TODO: Сделать проверку на то, что-бы дата была больше текущей.\n                // Проверим, всё ли заполнено.\n                if ($scope.newTask.$valid) {\n                    // Если да, то отправим задачу в список\n                    // и создадим новую.\n                    tasksService.push($scope.task);\n                    $scope.task.check();\n                    $scope.task = taskFactory();\n                    $scope.newTask.$setPristine();\n                }\n                // Если нет, то сообщим об этом пользователю.\n                else {\n                    $log.debug('not valid');\n                }\n            }\n        }\n    }\n\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('testwork')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController() {}\n})();\n(function() {\n  'use strict';\n\n  angular\n    .module('testwork')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('testwork')\n    .constant('addingMinutes', 10)\n    .constant('addingMinutesBeforeRemove', 2)\n    .constant('oneMinute', 60000);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('testwork')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n  }\n\n})();\n\nangular.module(\"testwork\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/components/newTask/newTask.html\",\"<form name=\\\"newTask\\\" ng-submit=\\\"form.add()\\\" novalidate=\\\"\\\"><h1>Добавить задачу</h1><div class=\\\"form-group\\\" ng-class=\\\"{\\'has-error\\':(isNameValid = (newTask.name.$dirty && newTask.name.$invalid))}\\\"><label>Название задачи</label> <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"task.title\\\" required=\\\"\\\" class=\\\"form-control\\\" placeholder=\\\"Захват мира!\\\"><p class=\\\"help-block has-error\\\" ng-show=\\\"isNameValid\\\">Назовите, то чем займётесь!</p></div><div class=\\\"form-group\\\"><label>Описание</label> <textarea ng-model=\\\"task.desc\\\" placeholder=\\\"Вы можете как написать, так и не неписать его.\\\" class=\\\"form-control\\\" rows=\\\"5\\\"></textarea></div><div class=\\\"form-group\\\" ng-class=\\\"{\\'has-error\\':(isDateValid = (newTask.date.$dirty && newTask.date.$invalid))}\\\"><label>Дата и время окончания</label><div class=\\\"row\\\"><div class=\\\"col-xs-6\\\"><input type=\\\"date\\\" name=\\\"date\\\" ng-model=\\\"task.date\\\" required=\\\"\\\" min=\\\"task.date\\\" class=\\\"form-control\\\"></div><div class=\\\"col-xs-6\\\"><input type=\\\"time\\\" name=\\\"time\\\" ng-model=\\\"task.date\\\" class=\\\"form-control\\\"></div></div><p class=\\\"help-block\\\" ng-show=\\\"isDateValid\\\">Любая задача должна когда-нибудь закончится.</p></div><button ng-disabled=\\\"newTask.$invalid\\\" type=\\\"submit\\\" class=\\\"btn btn-default\\\">Добавить</button></form>\");\n$templateCache.put(\"app/components/tasks/tasks.html\",\"<h2>Список задач <span class=\\\"badge\\\" ng-bind=\\\"tasks.length\\\"></span></h2><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"task in tasks | orderBy : \\'date\\' : false track by $index\\\"><div class=\\\"panel\\\" ng-class=\\\"{\\'panel-danger\\': task.status, \\'panel-primary\\': !task.status}\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-9\\\" ng-bind=\\\"task.title\\\"></div><div time-format=\\\"task.date.getTime()-timestamp\\\" class=\\\"col-xs-3 text-nowrap text-right\\\"><span ng-show=\\\"days > 0\\\">дни: {{days}}</span> <span ng-show=\\\"days == 0\\\">{{hhours}}:{{mminutes}}:{{sseconds}}</span></div></div></h3></div><div class=\\\"panel-body clearfix\\\"><div class=\\\"pull-left btn-group\\\"><span class=\\\"btn btn-info btn-sm\\\" ng-if=\\\"task.desc.length\\\" popover=\\\"{{task.desc}}\\\" popover-trigger=\\\"mouseenter\\\" popover-placement=\\\"bottom\\\">Подробнее</span></div><div class=\\\"text-right pull-right\\\"><button type=\\\"button\\\" class=\\\"btn btn-default btn-sm\\\" ng-click=\\\"addMinutes(task)\\\">Добавить 10 минут</button> <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm\\\" ng-click=\\\"remove(task)\\\">Удалить</button></div></div></div></li></ul>\");}]);"],"sourceRoot":"/source/"}